;(function($,window,undefined) {
  var pluginName = 'shapeshift',
      document = window.document,
      defaults = {
        // Features
        centerGrid: true,
        enableAnimation: true,
        enableAutoHeight: true,
        enableDrag: true,
        enableDragAnimation: true,
        enableResize: true,

        // Options
        childWidth: null,
        columns: null,
        dragBlacklist: null,
        dropWhitelist: "*",
        gutterX: 10,
        gutterY: 10,
        paddingY: 0,
        paddingX: 0,
        selector: "",
        dragHandle: "*",
      };

  function Plugin(element, options) {
    var ss = this;
    ss.element = element;
    ss.container = $(element);
    ss.options = $.extend({}, defaults, options);
    ss.init();
  }

  Plugin.prototype.init = function() {
    var ss = this,
        $container = $(ss.element);

    // Create the trigger events
    ss.eventSetup();

    // The initial shapeshift arrangement
    $container.trigger("ss-event-arrange");
  };

  Plugin.prototype.eventSetup = function() {
    var ss = this,
        options = ss.options,
        $container = $(ss.element);

    $container.off("ss-event-arrange").on("ss-event-arrange", function() { ss.arrange(); });

    $container.droppable().droppable('destroy');
    $container.children().draggable().draggable('destroy');
    if(options.enableDrag) { ss.drag(); }
    if(options.enableResize) { ss.resize(); };
  }

  Plugin.prototype.arrange = function() {
    var ss = this,
        options = ss.options,
        $container = $(ss.element),
        $objects = $container.children(options.selector).filter(':visible'),
        animated = true;

    if($objects.filter(".ss-moving")[0]) {
      animated = options.enableDragAnimation;
    } else {
      animated = options.enableAnimation;
    }

    // Calculate the positions for each element
    positions = ss.getPositions($container, false);

    // Animate / Move each object into place
    for(var obj_i=0; obj_i < $objects.length; obj_i++) {
      var $obj = $($objects[obj_i]),
          attributes = positions[obj_i];
      // Never animate the currently dragged item
      if(!$obj.hasClass("ss-moving")) {
        if(animated) {
          $obj.stop(true, false).animate(attributes, 250);
        } else {
          $obj.css(attributes);
        }
      }
    }

    // Set the container height to match the tallest column
    $container.css("height", options.containerHeight);
  }

  Plugin.prototype.drag = function () {
    var ss = this,
        options = ss.options,
        $container = $curContainer = $prevContainer = $(ss.element),
        $objects = $container.children(options.selector),
        $selected = null,
        dragging = false;

    // Dragging
    $objects.filter(options.dropWhitelist).filter(":not("+options.dragBlacklist+")").draggable({
      addClasses: false,
      containment: 'document',
      zIndex: 9999,
      drag: function(e, ui) { drag(e, ui); },
      start: function(e, ui) { start(e, ui); },
      handle: options.dragHandle
    });

    function start(e, ui) {
      $selected = $(e.target).addClass("ss-moving");
    }

    function drag(e, ui) {
      if(!dragging) {
        dragging = true;
        position = ss.getIntendedPosition(e);
        $objects = $curContainer.children(":not(.ss-moving):visible");
        if(position != $objects.size()) {
          $target = $objects.get(position);
          $selected.insertBefore($target);
        } else {
          $target = $objects.get(position - 1);
          $selected.insertAfter($target);
        }

        $curContainer.trigger("ss-event-arrange");
        $prevContainer.trigger("ss-event-arrange");

        window.setTimeout(function() {
          dragging = false;
        }, 180)
      }
      // Manually override the elements position
      ui.position.left = e.pageX - $(e.target).parent().offset().left - (options.childWidth / 2);
      ui.position.top = e.pageY - $(e.target).parent().offset().top - ($selected.outerHeight() / 2);
    }

    // Dropping
    $container.droppable({
      accept: options.dropWhitelist,
      drop: function(e) { drop(e); },
      over: function(e) { over(e); }
    });

    function drop(e) {
      $selected = $(".ss-moving").removeClass("ss-moving");
      $curContainer.trigger("ss-event-arrange").trigger("ss-event-dropped", $selected);
    }

    function over(e) {
      $prevContainer = $curContainer;
      $curContainer = $(e.target);
    }
  }

  Plugin.prototype.getPositions = function($container, ignoreSelected) {
    var ss = this,
        options = ss.options,
        $objects = $container.children(options.selector).filter(":visible"),
        columns = options.columns,
        colHeights = [],
        colWidth = null,
        gridOffset = options.paddingX,
        positions = [];

    if(ignoreSelected) {
      $objects = $objects.not(".ss-moving");
    }

    // Determine the width of each element.
    if(!options.childWidth) { options.childWidth = $objects.first().outerWidth(true); }

    // Determine the column width.
    colWidth = options.childWidth + options.gutterX;

    // Determine how many columns are currently active
    if(!columns) { columns = Math.floor($container.innerWidth() / colWidth); }

    // Offset the grid to center it.
    if(options.centerGrid) {
      gridOffset = Math.floor((($container.innerWidth() / colWidth) % 1 * colWidth) / 2) + (options.gutterX / 2);
    }

    // Create an array element for each column, which is then
    // used to store that columns current height.
    for(var i=0;i<columns;i++) {colHeights.push(options.paddingY);}

    // Loop over each element and determine what column it fits into
    for(var obj_i=0;obj_i<$objects.length;obj_i++) {
      var $obj = $($objects[obj_i]),
          col = $.inArray(Math.min.apply(window,colHeights), colHeights),
          height = $obj.outerHeight(true) + options.gutterY,
          offsetX = (colWidth * col) + gridOffset,
          offsetY = colHeights[col];

      // Store the position to animate into place later
      attributes = { left: offsetX, top: offsetY };
      positions[obj_i] = attributes;

      // Increase the calculated total height of the current column
      colHeights[col] += height;
    }
    // Store the height of the tallest column
    if(options.enableAutoHeight){
      options.containerHeight = Math.max.apply(Math,colHeights);
    }
    return positions;
  }

  Plugin.prototype.getIntendedPosition = function(e) {
    var ss = this,
        options = ss.options,
        $selected = $(".ss-moving"),
        $container = $selected.parent(),
        selectedX = $selected.position().left + (options.childWidth / 2),
        selectedY = $selected.position().top + ($selected.outerHeight() / 2),
        shortestDistance = 9999,
        chosenIndex = 0;

    // Get the grid based on all the elements except
    // the currently dragged element
    positions = ss.getPositions($container, true);

    // Go over all of those positions and figure out
    // which is the closest to the cursor.
    for(hov_i=0;hov_i<positions.length;hov_i++) {
      attributes = positions[hov_i];
      if(selectedX > attributes.left && selectedY > attributes.top) {
        xDist = selectedX - attributes.left;
        yDist = selectedY - attributes.top;

        distance = Math.sqrt((xDist * xDist) + (yDist * yDist));
        if(distance < shortestDistance) {
          shortestDistance = distance;
          chosenIndex = hov_i;

          if(hov_i === positions.length - 1) {
            $object = $container.children().not(".ss-moving");
            if(yDist > ($object.outerHeight() * .9) || xDist > options.childWidth * .9) {
              chosenIndex++;
            }
          }
        }
      }
    }
    return chosenIndex;
  }

  Plugin.prototype.resize = function () {
    var ss = this,
        $container = $(ss.element),
        resizing = false;

    $(window).on("resize", function() {
      if(!resizing) {
        resizing = true;
        $container.trigger("ss-event-arrange");
        setTimeout(function() {
          resizing = false;
        }, 200);
      }
    });
  }

  // Prevent against multiple instantiations
  $.fn[pluginName] = function (options) {
    return this.each(function () {
      $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
    });
  }

}(jQuery, window));